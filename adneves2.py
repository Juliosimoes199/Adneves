import streamlit as st
import google.generativeai as genai
import json
import os


# --- Informa√ß√µes do Servi√ßo ---
info_servico = "Temos os seguintes servi√ßos: personaliza√ß√£o de t-shirt, personaliza√ß√£o de panfleto, c√≥pia preto e branco, c√≥pia a cor, cria√ß√£o de toper, foto r√°pida, impress√£o de documento."

# --- Instru√ß√µes do Sistema/Persona ---
SYSTEM_INSTRUCTION = f"""
Voc√™ √© um especialista em design gr√°fico e atendimento ao cliente da empresa 'Adneves', localizada no Rocha Pinto. Seu principal objetivo √© coletar todas as informa√ß√µes detalhadas que o cliente deseja para personalizar nossos servi√ßos, garantindo a sua satisfa√ß√£o e fornecendo um atendimento personalizado e agrad√°vel.

Nossos servi√ßos incluem: {info_servico}.

Siga estas diretrizes RIGOROSAMENTE:
1.  **Apresenta√ß√£o:** Comece sempre se apresentando como um especialista da Adneves, seu nome √© Neves AI.
2.  **Personaliza√ß√£o (T-shirt e Panfleto):** Se o cliente demonstrar interesse em **personaliza√ß√£o de t-shirt** ou **panfleto**, pe√ßa todas as informa√ß√µes necess√°rias e detalhadas para a personaliza√ß√£o e a quantidade desejada do produto. Seja EXTREMAMENTE espec√≠fico sobre cores, imagens, textos, estilo, fontes, layout, tamanho da arte, local de aplica√ß√£o (frente, costas, mangas para t-shirt), e a **quantidade exata** desejada para cada item.
3.  **Incentivo e Diferenciais:** Se o cliente estiver confuso ou hesitante, enfatize os diferenciais da Adneves:
    * Experi√™ncia dos profissionais altamente qualificados.
    * Qualidade dos produtos (ex: tecidos dur√°veis para t-shirts).
    * Atendimento personalizado focado nas necessidades individuais.
    Incentive a personaliza√ß√£o.
4.  **Coleta de Dados para Agendamento:** Se o cliente expressar o desejo de aderir a um servi√ßo de personaliza√ß√£o (t-shirt ou panfleto), colete **nome completo** (primeiro e √∫ltimo nome), **tipo de servi√ßo** e a **descri√ß√£o detalhada da personaliza√ß√£o** (todos os detalhes mencionados no ponto 2).
5.  **Confirma√ß√£o da Personaliza√ß√£o:** Continue coletando informa√ß√µes detalhadas at√© que o cliente **confirme explicitamente** que est√° **totalmente satisfeito** e que **n√£o falta adicionar mais nenhum detalhe**. SOMENTE AP√ìS ESSA CONFIRMA√á√ÉO, confirme a personaliza√ß√£o com uma mensagem clara e de agradecimento.
6.  **Outras Perguntas:** Ofere√ßa-se para responder a outras perguntas sobre os servi√ßos ou a localiza√ß√£o da Adneves.
7.  **Tom:** Seja sempre amig√°vel, informativo e prestativo.\n"""
SYSTEM_INSTRUCTION += """
8.  **Formato de Sa√≠da JSON:** Ao final da intera√ß√£o, ou sempre que for relevante para a pr√≥xima etapa da conversa (por exemplo, quando as informa√ß√µes essenciais estiverem sendo coletadas ou confirmadas), voc√™ deve retornar um dicion√°rio JSON com as informa√ß√µes coletadas. Se uma informa√ß√£o n√£o estiver presente, retorne "null".
    ```json
    {
        "nome": "null",
        "servico": "null",
        "quantidade": "null",
        "descricao": "null",
        "servico_agendado": "null"
    }
    ```
    * **nome:** Nome completo do cliente.
    * **servico:** Tipo de servi√ßo de personaliza√ß√£o (ex: "personaliza√ß√£o de t-shirt", "personaliza√ß√£o de panfleto").
    * **quantidade:** A quantidade desejada do produto.
    * **descricao:** Todos os detalhes espec√≠ficos da personaliza√ß√£o.
    * **servico_agendado:** `true` se o cliente confirmar que todos os detalhes est√£o corretos e completos; `false` caso contr√°rio.
9.  **T√≥picos Fora de Servi√ßo:** Se a pergunta do cliente n√£o estiver relacionada a nenhum dos servi√ßos da Adneves, responda educadamente que voc√™ pode ajudar com informa√ß√µes sobre nossos servi√ßos.

Lembre-se: seu objetivo √© garantir que a personaliza√ß√£o atenda exatamente √†s expectativas do cliente.
"""

# Configurar o Gemini uma √∫nica vez
genai.configure(api_key="AIzaSyArTog-quWD9Tqf-CkkFAq_-UOZfK1FTtA")

# --- Gerenciamento de Estado do Streamlit ---
if "model" not in st.session_state:
    st.session_state.model = genai.GenerativeModel(
        'gemini-1.5-flash',
        system_instruction=SYSTEM_INSTRUCTION
    )

if "chat" not in st.session_state:
    st.session_state.chat = st.session_state.model.start_chat(history=[])


# --- Fun√ß√£o para Enviar Mensagens ao Gemini ---
def send_message_to_gemini(user_message):
    try:
        response = st.session_state.chat.send_message(
            user_message,
            generation_config=genai.types.GenerationConfig(temperature=0.7)
        )
        
        # O chat.history √© automaticamente atualizado pela API
        max_history_length = 20
        if len(st.session_state.chat.history) > max_history_length:
            st.session_state.chat.history = st.session_state.chat.history[-max_history_length:]
        
        return response.text
    except Exception as e:
        st.error(f"Ocorreu um erro ao comunicar com o Gemini: {e}")
        return "Desculpe, houve um problema. Por favor, tente novamente."

# --- Interface Streamlit ---
st.set_page_config(page_title="Adneves Design Gr√°fico", page_icon="üé®")

st.title("üé® Adneves Design Gr√°fico - Assistente de Personaliza√ß√£o")
st.markdown("Ol√°! Sou o especialista da Adneves, localizado no Rocha Pinto, e estou aqui para ajudar voc√™ a personalizar seus sonhos em design gr√°fico. Qual servi√ßo voc√™ procura hoje?")

# Exibir o hist√≥rico da conversa
for message in st.session_state.chat.history:
    role = "user" if message.role == 'user' else "assistant"
    with st.chat_message(role):
        # Itera sobre as partes da mensagem.
        # Para mensagens de texto, 'part' ser√° uma string.
        for part in message.parts:
            # Verifica se a 'part' √© diretamente uma string ou se tem um atributo 'text'
            if isinstance(part, str):
                content = part
            elif hasattr(part, 'text'): # Verifica se a parte tem um atributo 'text' (como TextPart ou similar)
                content = part.text
            else: # Para outros tipos de conte√∫do, converte para string
                content = str(part)

            # Tenta parsear a resposta do modelo como JSON
            if role == "assistant":
                try:
                    # Verifica se o conte√∫do parece ser um JSON antes de tentar parsear
                    # (come√ßa com '{' e termina com '}' e tem pelo menos alguns caracteres no meio)
                    if content.strip().startswith('{') and content.strip().endswith('}') and len(content.strip()) > 2:
                        resposta_json = json.loads(content)
                        st.json(resposta_json) # Exibe como JSON formatado
                    else:
                        st.markdown(content) # Exibe como texto normal
                except json.JSONDecodeError:
                    st.markdown(content) # Se n√£o for JSON v√°lido, exibe como texto normal
            else: # Mensagem do usu√°rio
                st.markdown(content)


# Campo de entrada para o usu√°rio
user_input = st.chat_input("Digite sua pergunta ou pedido:")

if user_input:
    with st.chat_message("user"):
        st.markdown(user_input)

    response_text = send_message_to_gemini(user_input)
    st.rerun() # For√ßa um rerun para exibir a nova mensagem imediatamente